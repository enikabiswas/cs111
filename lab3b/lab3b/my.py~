#!/usr/bin/python

import sys, string, locale, csv

class superblock {
	def __init__(self, csv):
		self.total_blocks = csv[1]
		self.total_inodes = csv[2]
		self.block_size = csv[3]
		self.inode_size = csv[4]
		self.first_nonreserved_inode = csv[7]
}
'''
class block {
	block_number = 0
	ref_list = []
}
'''
class inode {
	#ref_list = []
	def __init__(self, csv):
		self.inode_num = csv[1]
		self.link_count = csv[6]
		self.blocks = []
		for i in range(12,24):
			self.blocks.append(int(csv[i]))
		self.single_indirect = csv[24]
		self.double_indirect = csv[25]
		self.triple_indirect = csv[26]
}

class dirent {
	def __init__(self, csv):
		self.parent_inode = csv[1]
		self.offset = csv[2]
		self.inode_of_refd = csv[3]
		self.entry_len = csv[4]
		self.name_len = csv[5]
		self.name = csv[6]
}

class indirect {
	def __init__(self, csv):
		self.owner_inode_num = csv[1]
		self.level = csv[2]
		self.offset_of_refd = csv[3]
		self.scanned_block_num = csv[4]
		self.refd_block_num = csv[5]
}

if __name__ == '__main__':
	#for exit
	code = 0
	i_free = []
	b_free = []
	indirects = []
	dirents = []
	inodes = {}
	blocks = {}

	if sys.argc != 2:
		sys.stderr.write("*** Error: incorrect number of arguments!\n")

	try:
		file = open(sys.argv[1], "r")
	except:
		sys.stderr.write("*** Error: unable to open file!\n")

	with file as csvfile:
		reader = csv.reader(csvfile, delimiter=',', quotechar="\'")
		for line in reader:
			if line[0] == "SUPERBLOCK":
				sup_block = superblock(line)
			elif line[0] == "BFREE":
				b_free.append(line[1])
			elif line[0] == "IFREE":
				i_free.append(line[1])
			elif line[0] == "DIRENT":
				dirents.append(dirent(line))
			elif line[0] == "INDIRECT":
				indirects.append(indirect(line))
			elif line == "INODE":
				inodes[line[1]] = inode(line) #key'd based on inode number => line[1]


	################ BLOCK CONSISTENCY AUDITS ######################

	for i in inodes:
		offset = 0
		for b in range(0,12):
			if i.blocks[b] != 0:
				if i.blocks[b] < 0 or i.blocks[b] >= sup_block.total_blocks:
					print("INVALID BLOCK {} IN INODE {} AT OFFSET {}\n".format(i.blocks[b], i.inode_num, b))
					code = 2
				elif i.blocks[b] < 11: #first non reserved inode
					print("RESERVED BLOCK {} IN INODE {} AT OFFSET {}\n".format(i.blocks[b], i.inode_num, b))
					code = 2
				elif i.blocks[b] in blocks:
					blocks.append((i.inode_num, b, 0)) #tuple format: inode number, offset, level of indirection
				else:
					blocks[i.blocks[b]] = [(i.inode_num, b, 0)] #if list doesn't already exist, then make a new list 

		offset = 12 #these were calcluated in my previous lab
		if i.single_indirect != 0:
			if i.single_indirect < 0 or i.single_indirect >= sup_block.total_blocks:
				print("INVALID INDIRECT BLOCK {} IN INODE {} AT OFFSET {}\n".format(b, i.inode_num, offset))
				code = 2
			elif i.single_indirect < 11:
				print("RESERVED INDIRECT BLOCK {} IN INODE {} AT OFFSET {}\n".format(b, i.inode_num, offset))
				code = 2
			elif b in blocks:
				blocks.append((i.inode_num, offset, 1)) #tuple format: inode number, offset, level of indirection
			else:
				blocks[b] = [(i.inode_num, offset, 1)] #if list doesn't already exist, then make a new list 

		offset = 268 #these were calcluated in my previous lab
		if i.double_indirect != 0:
			if i.double_indirect < 0 or i.double_indirect >= sup_block.total_blocks:
				print("INVALID DOUBLE INDIRECT BLOCK {} IN INODE {} AT OFFSET {}\n".format(b, i.inode_num, offset))
				code = 2
			elif i.double_indirect < 11:
				print("RESERVED DOUBLE INDIRECT BLOCK {} IN INODE {} AT OFFSET {}\n".format(b, i.inode_num, offset))
				code = 2
			elif b in blocks:
				blocks.append((i.inode_num, offset, 2)) #tuple format: inode number, offset, level of indirection
			else:
				blocks[b] = [(i.inode_num, offset, 2)] #if list doesn't already exist, then make a new list 

		offset = 65804 #these were calcluated in my previous lab
		if i.triple_indirect != 0:
			if i.triple_indirect < 0 or i.triple_indirect >= sup_block.total_blocks:
				print("INVALID TRIPLE INDIRECT BLOCK {} IN INODE {} AT OFFSET {}\n".format(b, i.inode_num, offset))
				code = 2
			elif i.triple_indirect < 11:
				print("RESERVED TRIPLE INDIRECT BLOCK {} IN INODE {} AT OFFSET {}\n".format(b, i.inode_num, offset))
				code = 2
			elif b in blocks:
				blocks.append((i.inode_num, offset, 3)) #tuple format: inode number, offset, level of indirection
			else:
				blocks[b] = [(i.inode_num, offset, 3)] #if list doesn't already exist, then make a new list 


	#we should now have all of the blocks saved into our blocks dictionary
	for b in range(11, sup_block.total_blocks):
		if b not in b_free and b not in blocks:
			print("UNREFERENCED BLOCK {}\n".format(b))
			code = 2
		elif b in blocks and b in b_free:
			print("ALLOCATED BLOCK {} ON FREELIST\n".format(b))
			code = 2
		if len(blocks[b]) > 1:
			message = ""
			if blocks[b][2] == 1:
				message = "INDIRECT"
			elif blocks[b][2] == 2:
				message = "DOUBLE INDIRECT "
			elif blocks[b][2] == 3:
				message = "TRIPLE INDIRECT "
			
			print("DUPLICATE {}BLOCK {} IN INODE {} AT OFFSET {}".format(message, b, blocks[b][0], blcoks[b][1]))
			code = 2


	###############################################################

	################ INODE ALLOCATION AUDITS ######################

	for i in range (2, sup_block.total_inodes):
		if i in inodes and i in i_free:
			print("ALLOCATED INODE {} ON FREELIST\n".format(i))
			code = 2
		elif i not in inodes and i not in i_free:
			print("UNALLOCATED INODE {} NOT ON FREELIST\n".format(i))
			code = 2

	###############################################################

	################ DIRECTORY ALLOCATION AUDITS ##################

	links = [0] * sup_block.total_inodes #https://stackoverflow.com/questions/10712002/create-an-empty-list-in-python-with-certain-size

	for d in dirents:
		index = d[2];
		links[index] += 1
		if d.inode_of_refd in i_free:
			print("DIRECTORY INODE {} NAME {} UNALLOCATED INODE {}\n".format(d.parent_inode, d.name, d.inode_of_refd))
			code = 2
		if d.inode_of_refd < 0 or d.inode_of_refd > sup_block.total_inodes:
			print("DIRECTORY INODE {} NAME {} INVALID INODE {}\n".format(d.parent_inode, d.name, d.inode_of_refd))
			code = 2

	for l in range(2, sup_block.total_inodes):
		if links[l] != inodes[l].link_count:
			print("INODE {} HAS {} LINKS BUT LINKCOUNT IS {}\n".format(l, links[l], inodes[l].link_count))
			code = 2
		if l in inodes and links[l] == 0:
			print("INODE {} HAS 0 LINKS BUT LINKCOUNT IS {}".format(l, inodes[l].link_count))
			code = 2




	###############################################################

	exit(code)







